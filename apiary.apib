FORMAT: 1A
HOST: http://helloworld.pl

--- Przedszkolowo API ---
---

# Parametry przesyłane w HEADER
## - key
unikalny klucz dostępu do API, przesyłany przy wywoływaniu wszystkich funkcji
## - sessid
identyfikator sesji otrzymany po zalogowaniu

# Parametry przesyłane w POST
## - request
obiekt z parametrami w JSON, przykład:


POST /login.jsp HTTP/1.1

Host: www.mysite.com

User-Agent: Mozilla/4.0

Content-Length: 29

Content-Type: application/x-www-form-urlencoded

request={ "email": "adres@mail.pl", "password": "encryptedpassword123" }

# Informacje podstawowe

Wszystkie funkcje za wyłączeniem __loginUser__ oraz __registerUser__ muszą być wywoływane z parametrem __sessid__ (przesyłany w headerze).

Wszystkie informacje zwrotne z serwera zawierają 4 główne pola:

- __status__ - ["OK" / "ERRROR" / "SESSION_END"] "OK" w przypadku gdy polecenie zostało poprawnie wykonane, "SESSION_END" gdy sesja wygasła, w przeciwnym wypadku "ERROR"
- __message__ - zawiera wiadomość wyświetlaną użytkownikowi aplikacji w przypadku gdy pole __status__ ma wartość "ERROR"
- __developMessage__ - zawiera szczegóły na temat błędu w przypadku gdy pole __status__ ma wartość "ERROR"
- __data__ - złożony obiekt JSON zawierający zwrócone przez serwer informacje

Konkretną funkcję na serwerze wywołuje się następującym adresem URL: http://adresstrony.pl/funappapi/function/loginUser

# Działanie sesji

Klucz __sessid__ przydzielany jest podczas logowania. Klucz ten wygasa po 24 h.

W przypadku gdy klucz wygaśnie, każda funkcja (za wyjątkiem loginUser, registerUser oraz passwordReminder) będzie zwracać status __SESSION_END__ .

# Android PUSH

Serwer przesyła PUSHem dwa parametry dla Androida:

- __message__ - wiadomość do wyświetlenia w notification bar
- __changed__ - który typ wiadomości się zmienił, możliwe opcje: "MENU", "NOTICE", "PAYMENT", "TIMETABLE"

# Przykład błędu

    {
        "status": "ERROR",
        "message": "Błąd serwera.",
        "developMessage": "Nie podano wszystkich parametrów."
    }
    
# Przykład błędu sesji

    {
        "status": "SESSION_END",
        "message": "Sesja wygasła.",
        "developMessage": ""
    }

----

# Group Getters

## Get function [/loginUser]
### loginUser [POST]
+ Parameters
    + email (required, string) ... E-mail address.
    + password (required, string) ... Encrypted password.
    
+ Request (application/json)

        {
            "email": "adres@mail.pl",
            "password": "encryptedpassword123"
        }

+ Response 200 (application/json)

        {
            "status": "OK",
            "data":
            {
                "sessid": "crdlso0gr8gsavc4leo3va3ai5"
            }
        }

## Get function [/getUserData]        
### getUserData [GET]

+ Response 200 (application/json)

        {
            "status": "OK",
            "data": 
            {
                "name": "Jan"
                "surname": "Kowalski"
                "email": "jankowalski@gmail.com"
            }
        }
        
## Get function [/getMenu]        
### getMenu [POST]
+ Parameters
    + limit (required, string) ... Items limit.

+ Request (application/json)

        {
            "limit": "2",
        }

+ Response 200 (application/json)

        {
            "status": "OK",
            "data": 
            {
                "0": 
                {
                    "id": "1",
                    "dayName": "poniedziałek",
                    "date": "1390829668",
                    "title": "tytul",
                    "content": "zupa mleczna (płatki śniadaniowe), pieczywo jasne i ciemne, twarożek z rzodkiewką, herbatka z cytryną"
                }
                "1": 
                {
                    "id": "2",
                    "dayName": "wtorek",
                    "date": "1390829668",
                    "title": "tytul",
                    "content": "zupa mleczna (płatki śniadaniowe), pieczywo jasne i ciemne, twarożek z rzodkiewką, herbatka z cytryną"
                }
            }
        }
        
## Get function [/getNotices]        
### getNotices [POST]
+ Parameters
    + limit (required, string) ... Items limit.

+ Request (application/json)

        {
            "limit": "2",
        }

+ Response 200 (application/json)

        {
            "status": "OK",
            "data": 
            {
                "0": 
                {
                    "id": "3",
                    "dayName": "poniedziałek",
                    "date": "1390829668",
                    "title": "Święto Pluszowego Misia",
                    "content": "W poniedziałek 25 listopada 2013 roku obchodziliśmy Święto Pluszowego Misia."
                }
                "1": 
                {
                    "id": "4",
                    "dayName": "wtorek",
                    "date": "1390829668",
                    "title": "Jasełka w bajkowej krainie",
                    "content": "W poniedziałek 25 listopada 2013 roku obchodziliśmy Jasełka w bajkowej krainie."
                }
            }
        }
        
## Get function [/getPayments]        
### getPayments [POST]
+ Parameters
    + limit (required, string) ... Items limit.

+ Request (application/json)

        {
            "limit": "2",
        }

+ Response 200 (application/json)

        {
            "status": "OK",
            "data": 
            {
                "0": 
                {
                    "id": "5",
                    "dayName": "poniedziałek",
                    "date": "1390829668",
                    "title": "Tytuł płatności 1",
                    "content": "Lorem Ipsum jest tekstem stosowanym jako przykładowy wypełniacz w przemyśle poligraficznym."
                }
                "1": 
                {
                    "id": "6",
                    "dayName": "wtorek",
                    "date": "1390829668",
                    "title": "Tytuł płatności 2",
                    "content": "Lorem Ipsum jest tekstem stosowanym jako przykładowy wypełniacz w przemyśle poligraficznym."
                }
            }
        }
        
## Get function [/getTimetables]        
### getTimetables [POST]
+ Parameters
    + limit (required, string) ... Items limit.

+ Request (application/json)

        {
            "limit": "2",
        }

+ Response 200 (application/json)

        {
            "status": "OK",
            "data": 
            {
                "0": 
                {
                    "id": "7",
                    "dayName": "poniedziałek",
                    "date": "1390829668",
                    "title": "Tytuł zajęcia 1",
                    "content": "Lorem Ipsum jest tekstem stosowanym jako przykładowy wypełniacz w przemyśle poligraficznym."
                }
                "1": 
                {
                    "id": "8",
                    "dayName": "wtorek",
                    "date": "1390829668",
                    "title": "Tytuł zajęcia 2",
                    "content": "Lorem Ipsum jest tekstem stosowanym jako przykładowy wypełniacz w przemyśle poligraficznym."
                }
            }
        }

# Group Setters
## Set function [/passwordReminder]        
### passwordReminder [POST]
+ Parameters
    + email (required, string) ... E-mail address.

+ Request (application/json)

        {
            "email": "adres@mail.pl",
        }

+ Response 200 (application/json)

        {
            "status": "OK",
            "message", "Kliknij w link otrzymany mailem by dokończyć procedurę zmiany hasła."
            "data": {}
        }
        
## Set function [/registerUser]        
### registerUser [POST]
+ Parameters
    + email (required, string) ... E-mail address.

+ Request (application/json)

        {
            "email": "jankowalski@gmail.com",
        }

+ Response 200 (application/json)

        {
            "status": "OK",
            "data": {}
        }
        
## Set function [/setOrUpdatePushToken]        
### setOrUpdatePushToken [POST]
+ Parameters
    + pushToken (required, string) ... Device push token.
    + os (required, string) ... Smartphone OS (example: IOS, ANDROID, WP).
    + isEnabled (required, string) ... Add or remove push token from database (example: true, false)

+ Request (application/json)

        {
            "pushToken": "0f744707bebcf74f9b7c25d48e3358945f6aa01da5ddb387462c7eaf61bbad78",
            "os": "IOS"
        }

+ Response 200 (application/json)

        {
            "status": "OK",
            "data": {}
        }
        
## Set function [/changeUserData]        
### changeUserData [POST]
+ Parameters
    + name (required, string) ... Name.
    + surname (required, string) ... Surname.

+ Request (application/json)

        {
            "name": "Jan",
            "surname": "Kowalski"
        }

+ Response 200 (application/json)

        {
            "status": "OK",
            "message": "Dane zostały zmienione.",
            "data": {}
        }
        
## Set function [/changeUserPassword]        
### changeUserPassword [POST]
+ Parameters
    + passwordOld (required, string) ... Encrypted old password.
    + passwordNew (required, string) ... Encrypted new password.

+ Request (application/json)

        {
            "passwordOld": "encryptedpassword123",
            "passwordNew": "encryptedpassword123",
        }

+ Response 200 (application/json)

        {
            "status": "OK",
            "message": "Hasło zostało zmienione.",
            "data": {}
        }